#Código Dash

import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.cm as cm
import pandas as pd
import numpy as np
from sodapy import Socrata
from pylab import *
import dash
import dash_core_components as dcc
import dash_html_components as html
from matplotlib import colors
from dash.dependencies import Input, Output, State
from scipy.optimize import curve_fit
import plotly.io as pio

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
colors = {
    'background': '#000000',
    'text': '#fdf3fa'
}
client = Socrata("www.datos.gov.co","S7PcPaCGni4kPjVlznj8gAI2Y",
                  username="johan.manjarres@correo.usa.edu.co",
                  password="Pacho2017")

results = client.get("gt2j-8ykr", limit=20000)
df_result = pd.DataFrame.from_records(results)

df_result['casos'] = 1

df_result['lat']=df_result['departamento']
df_result['lat'].replace({'Bogotá D.C.':4.6097102,'Valle del Cauca':3.5833299,'Antioquia':6.1759100,
                      'Cartagena D.T. y C.':10.3997202,'Huila':1.8537101,'Meta':3.9869499,
                      'Atlántico':10.8595304,'Barranquilla D.E.':10.9685402,'Risaralda':4.8391600,
                      'Norte de Santander':8.2377300,'Caldas':5.4478302,'Cundinamarca': 4.7163801,
                      'Amazonas':-4.2081000,'Nariño':0.8301800,'Santa Marta D.T. y C.':11.2407904,
                      'Tolima':4.1492400,'Magdalena':11.0070295,'Cesar':8.8170000,
                      'Quindío':4.5294900,'Boyacá':5.5352803,'Santander':7.1253901,
                      'Buenaventura D.E.':3.5394399,'Cauca':2.4382300,'Bolívar':9.2420197,
                      'Córdoba':8.7479801,'Chocó':5.6918802,'Casanare':5.3377500,
                      'La Guajira':11.5444403,'Caquetá':1.6143800,'Arauca':7.0847100,
                      'Archipiélago de San Andrés Providencia y Santa Catalina':12.5847197,
                      'Sucre':9.3047199,'Putumayo':1.1493300,'Vaupés':0.9723900},inplace=True)

df_result['lon']=df_result['departamento']
df_result['lon'].replace({'Bogotá D.C.':-74.0817490,'Valle del Cauca':-77.0000000,'Antioquia':-75.5917435,
                      'Cartagena D.T. y C.':-75.5144424,'Huila':-76.0507126,'Meta':-73.7579727,
                      'Atlántico':-74.7738571,'Barranquilla D.E.':-74.7813187,'Risaralda':-75.6672668,
                      'Norte de Santander':-73.3560410,'Caldas':-74.6631088,'Cundinamarca': -74.2119522,
                      'Amazonas':-69.9432000,'Nariño':-77.6495895,'Santa Marta D.T. y C.':-74.1990433,
                      'Tolima':-74.8842926,'Magdalena':-74.2476501,'Cesar':-74.7170000,
                      'Quindío':-75.6409073,'Boyacá':-73.3677826,'Santander':-73.1197968,
                      'Buenaventura D.E.':-76.3036118,'Cauca':-76.6131592,'Bolívar':-74.7546692,
                      'Córdoba':-75.8814316,'Chocó':-76.6583481,'Casanare':-72.3958588,
                      'La Guajira':-72.9072189,'Caquetá':-75.6062317,'Arauca':-70.7590800,
                      'Archipiélago de San Andrés Providencia y Santa Catalina':-81.7005615,
                      'Sucre':-75.3977814,'Putumayo':-76.6466100,'Vaupés':-70.4063500},inplace=True)

casos_bogota=df_result.query('departamento=="Bogotá D.C."')
b = casos_bogota.shape[0]
casos_cauca=df_result.query('departamento=="Valle del Cauca"')
v = casos_cauca.shape[0]
casos_Meta=df_result.query('departamento=="Meta"')
m = casos_cauca.shape[0]
casos_antioquia=df_result.query('departamento=="Antioquia"')
a = casos_antioquia.shape[0]
casos_cartagena=df_result.query('departamento=="Cartagena D.T. y C."')
c = casos_cartagena.shape[0]
casos_atlantico=df_result.query('departamento=="Atlántico"')
a1 = casos_atlantico.shape[0]
casos_barranquilla=df_result.query('departamento=="Barranquilla D.E."')
b1 = casos_barranquilla.shape[0]
casos_cundinamarca=df_result.query('departamento=="Cundinamarca"')
c1 = casos_cundinamarca.shape[0]
casos_amazonas=df_result.query('departamento=="Amazonas"')
a2 = casos_amazonas.shape[0]
casos_risaralda=df_result.query('departamento=="Risaralda"')
r = casos_risaralda.shape[0]
casos_narino=df_result.query('departamento=="Nariño"')
n = casos_narino.shape[0]
casos_santa_marta=df_result.query('departamento=="Santa Marta D.T. y C."')
s = casos_santa_marta.shape[0]
casos_huila=df_result.query('departamento=="Huila"')
h = casos_huila.shape[0]
casos_tolima=df_result.query('departamento=="Tolima"')
t = casos_tolima.shape[0]
casos_huila=df_result.query('departamento=="Norte de Santander"')
n1 = casos_huila.shape[0]
casos_caldas=df_result.query('departamento=="Caldas"')
c2 = casos_caldas.shape[0]
casos_magdalena=df_result.query('departamento=="Magdalena"')
m1 = casos_magdalena.shape[0]
casos_cesar=df_result.query('departamento=="Cesar"')
c3 = casos_cesar.shape[0]
casos_quindio=df_result.query('departamento=="Quindio"')
q = casos_quindio.shape[0]
casos_boyaca=df_result.query('departamento=="Boyacá"')
b2 = casos_boyaca.shape[0]
casos_santander=df_result.query('departamento=="Santander"')
s1 = casos_santander.shape[0]
casos_buenaventura=df_result.query('departamento=="Buenaventura D.E."')
b3 = casos_buenaventura.shape[0]
casos_cauca=df_result.query('departamento=="Cauca"')
c4 = casos_cauca.shape[0]
casos_bolivar=df_result.query('departamento=="Bolívar"')
b4 = casos_bolivar.shape[0]
casos_cordoba=df_result.query('departamento=="Córdoba"')
c5 = casos_cordoba.shape[0]
casos_choco=df_result.query('departamento=="Chocó"')
c6 = casos_choco.shape[0]
casos_casanare=df_result.query('departamento=="Casanare"')
c7 = casos_casanare.shape[0]
casos_guajira=df_result.query('departamento=="La Guajira"')
g = casos_guajira.shape[0]
casos_caqueta=df_result.query('departamento=="Caquetá"')
c8 = casos_caqueta.shape[0]
casos_caqueta=df_result.query('departamento=="Archipiélago de San Andrés Providencia y Santa Catalina"')
sp = casos_caqueta.shape[0]
casos_sucre=df_result.query('departamento=="Sucre"')
s2 = casos_sucre.shape[0]
casos_arauca=df_result.query('departamento=="Arauca"')
a3 = casos_arauca.shape[0]
casos_putumayo=df_result.query('departamento=="Putumayo"')
put = casos_putumayo.shape[0]
casos_Vaupés=df_result.query('departamento=="Vaupés"')
vap = casos_Vaupés.shape[0]

df_result['casos_totales'] = df_result['departamento']
df_result['casos_totales'].replace({'Bogotá D.C.':b,'Valle del Cauca':v,'Meta':m,'Antioquia':a,'Cartagena D.T. y C.':c,
                                   'Atlántico':a1,'Barranquilla D.E.':b1,'Cundinamarca':c1,'Amazonas':a2,'Risaralda':r,
                                   'Nariño':n,'Santa Marta D.T. y C.':s,'Huila':h,'Tolima':t,'Norte de Santander':n1,
                                   'Caldas':c2,'Magdalena':m1,'Cesar':c3,'Quindío':q,'Boyacá':b2,'Santander':s1,
                                    'Buenaventura D.E.':b3,'Cauca':c4,'Bolívar':b4,'Córdoba':c5,'Chocó':c6,'Casanare':c7,
                                   'La Guajira':g,'Caquetá':c8,'Archipiélago de San Andrés Providencia y Santa Catalina':sp,
                                   'Sucre':s2,'Arauca':a3,'Putumayo':put,'Vaupés':vap}, inplace=True)

df_result['fecha_de_notificaci_n']=df_result['fecha_de_notificaci_n'].map(lambda x:str(x)[:-13])
df_result['fecha_de_muerte']=df_result['fecha_de_muerte'].dropna(how='any').map(lambda x:str(x)[:-13])
df_result['fecha_diagnostico']=df_result['fecha_diagnostico'].map(lambda x:str(x)[:-13])
df_result['fecha_recuperado']=df_result['fecha_recuperado'].map(lambda x:str(x)[:-13])
df_result['fecha_reporte_web']=df_result['fecha_reporte_web'].map(lambda x:str(x)[:-13])

df_result.to_excel("data.xlsx",sheet_name="datos")

df=pd.read_excel('data.xlsx') 

anim=df.groupby(['departamento','fecha_diagnostico']).count()
b=anim.iloc[:,0]

depart=["Bogotá D.C.","Valle del Cauca","Meta","Antioquia","Cartagena D.T. y C.","Atlántico","Barranquilla D.E.",
        "Cundinamarca","Amazonas","Risaralda","Nariño","Santa Marta D.T. y C.","Huila","Tolima","Norte de Santander",
        "Caldas","Magdalena","Cesar","Quindío","Boyacá","Santander","Buenaventura D.E.","Cauca","Bolívar","Córdoba",
        "Chocó","Casanare","La Guajira","Caquetá","Archipiélago de San Andrés Providencia y Santa Catalina","Sucre",
        "Arauca","Putumayo","Vaupés"]
depart.sort(key = str.lower)
cco=np.arange(0,len(depart),1)

lendep=[]
lendep.insert(0,len(df.query('departamento==@depart[0]').groupby('fecha_diagnostico').count()))
lendep.insert(1,len(df.query('departamento==@depart[1]').groupby('fecha_diagnostico').count()))
lendep.insert(2,len(df.query('departamento==@depart[2]').groupby('fecha_diagnostico').count()))
lendep.insert(3,len(df.query('departamento==@depart[3]').groupby('fecha_diagnostico').count()))
lendep.insert(4,len(df.query('departamento==@depart[4]').groupby('fecha_diagnostico').count()))
lendep.insert(5,len(df.query('departamento==@depart[5]').groupby('fecha_diagnostico').count()))
lendep.insert(6,len(df.query('departamento==@depart[6]').groupby('fecha_diagnostico').count()))
lendep.insert(7,len(df.query('departamento==@depart[7]').groupby('fecha_diagnostico').count()))
lendep.insert(8,len(df.query('departamento==@depart[8]').groupby('fecha_diagnostico').count()))
lendep.insert(9,len(df.query('departamento==@depart[9]').groupby('fecha_diagnostico').count()))
lendep.insert(10,len(df.query('departamento==@depart[10]').groupby('fecha_diagnostico').count()))
lendep.insert(11,len(df.query('departamento==@depart[11]').groupby('fecha_diagnostico').count()))
lendep.insert(12,len(df.query('departamento==@depart[12]').groupby('fecha_diagnostico').count()))
lendep.insert(13,len(df.query('departamento==@depart[13]').groupby('fecha_diagnostico').count()))
lendep.insert(14,len(df.query('departamento==@depart[14]').groupby('fecha_diagnostico').count()))
lendep.insert(15,len(df.query('departamento==@depart[15]').groupby('fecha_diagnostico').count()))
lendep.insert(16,len(df.query('departamento==@depart[16]').groupby('fecha_diagnostico').count()))
lendep.insert(17,len(df.query('departamento==@depart[17]').groupby('fecha_diagnostico').count()))
lendep.insert(18,len(df.query('departamento==@depart[18]').groupby('fecha_diagnostico').count()))
lendep.insert(19,len(df.query('departamento==@depart[19]').groupby('fecha_diagnostico').count()))
lendep.insert(20,len(df.query('departamento==@depart[20]').groupby('fecha_diagnostico').count()))
lendep.insert(21,len(df.query('departamento==@depart[21]').groupby('fecha_diagnostico').count()))
lendep.insert(22,len(df.query('departamento==@depart[22]').groupby('fecha_diagnostico').count()))
lendep.insert(23,len(df.query('departamento==@depart[23]').groupby('fecha_diagnostico').count()))
lendep.insert(24,len(df.query('departamento==@depart[24]').groupby('fecha_diagnostico').count()))
lendep.insert(25,len(df.query('departamento==@depart[25]').groupby('fecha_diagnostico').count()))
lendep.insert(26,len(df.query('departamento==@depart[26]').groupby('fecha_diagnostico').count()))
lendep.insert(27,len(df.query('departamento==@depart[27]').groupby('fecha_diagnostico').count()))
lendep.insert(28,len(df.query('departamento==@depart[28]').groupby('fecha_diagnostico').count()))
lendep.insert(29,len(df.query('departamento==@depart[29]').groupby('fecha_diagnostico').count()))
lendep.insert(30,len(df.query('departamento==@depart[30]').groupby('fecha_diagnostico').count()))
lendep.insert(31,len(df.query('departamento==@depart[31]').groupby('fecha_diagnostico').count()))
lendep.insert(32,len(df.query('departamento==@depart[32]').groupby('fecha_diagnostico').count()))
lendep.insert(33,len(df.query('departamento==@depart[33]').groupby('fecha_diagnostico').count()))

casos=df.iloc[:,1]

casost=df_result.groupby('departamento').count()
casostot=casost.iloc[:,0]

diag=df.groupby('fecha_diagnostico').count()
casos_d=diag.iloc[:,1]
diagnostico=df.iloc[:,14].dropna(how='any').unique().tolist()
diagnostico.sort()
x=np.arange(1,len(casos_d),1)
cd=np.arange(0,len(casos_d),1)
d=0
con_tot=[]
for i in cd:
    d=d+casos_d[i]
    con_tot.insert(i,d)
    
rec=df.groupby('fecha_recuperado').count()
casos_r=rec.iloc[:,1]
recuperado=df.iloc[:,15].dropna(how='any').unique().tolist()
recuperado.sort()   
cr=np.arange(0,len(casos_r),1)
r=0
rec_tot=[]
for i in cr:
    r=r+casos_r[i]
    rec_tot.insert(i,r)

dead=df.groupby('fecha_de_muerte').count()
casos_m=dead.iloc[:,1]
muerto=df.iloc[:,13].dropna(how='any').unique().tolist()
muerto.sort()  
cm=np.arange(0,len(casos_m),1)
m=0
dead_tot=[]
for i in cm:
    m=m+casos_m[i]
    dead_tot.insert(i,m)
     
diag['contagios totales']=con_tot

anastasio=np.arange(0,(len(b)),1)
fechasan=[]
an_tot=[]
deparn=[]
anit=0
j=0
corte=0
for i in anastasio: 
    newde=depart[corte]
    newfe=diagnostico[corte]
    anit=anit+b[i]
    an_tot.insert(i,anit)
    deparn.insert(i,newde)
    fechasan.insert(i,newfe)
    j+=1
    
    if j==lendep[corte]:
        anit=0
        corte+=1
        j=0
        if corte>31:
            corte=0
            
newfe=anim.index.values

fig_11 = px.scatter_mapbox(df_result, lat='lat', lon='lon', hover_name='departamento', color='casos_totales', 
                        size='casos_totales',color_continuous_scale=px.colors.sequential.Blackbody_r, zoom=4,
                        title= 'Covid-19 en Colombia', height=800)

fig_11.update_layout(
    mapbox_style="white-bg",
    mapbox_layers=[
        {
            "below": 'traces',
            "sourcetype": "raster",
            "source": [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}"
            ]
        }
      ])
fig_11.update_layout(
template = 'plotly_dark',
showlegend=False,)
fig_11.show()

tot=df.groupby('fecha_reporte_web').count()
totfet=tot.index.values
fe1=np.arange(0,len(lendep),1)
fe2=np.arange(0,len(totfet),1)
contfe=0
feani=[]
deani=[]
for i in fe1:
    for j in fe2:
        feani.insert(contfe,totfet[j])
        deani.insert(contfe,depart[i])
        contfe+=1
        
anichi=pd.DataFrame({'departamento':deani,'fecha':feani})

anichi['lat']=anichi['departamento']
anichi['lat'].replace({'Bogotá D.C.':4.6097102,'Valle del Cauca':3.5833299,'Antioquia':6.1759100,
                      'Cartagena D.T. y C.':10.3997202,'Huila':1.8537101,'Meta':3.9869499,
                      'Atlántico':10.8595304,'Barranquilla D.E.':10.9685402,'Risaralda':4.8391600,
                      'Norte de Santander':8.2377300,'Caldas':5.4478302,'Cundinamarca': 4.7163801,
                      'Amazonas':-4.2081000,'Nariño':0.8301800,'Santa Marta D.T. y C.':11.2407904,
                      'Tolima':4.1492400,'Magdalena':11.0070295,'Cesar':8.8170000,
                      'Quindío':4.5294900,'Boyacá':5.5352803,'Santander':7.1253901,
                      'Buenaventura D.E.':3.5394399,'Cauca':2.4382300,'Bolívar':9.2420197,
                      'Córdoba':8.7479801,'Chocó':5.6918802,'Casanare':5.3377500,
                      'La Guajira':11.5444403,'Caquetá':1.6143800,'Arauca':7.0847100,
                      'Archipiélago de San Andrés Providencia y Santa Catalina':12.5847197,
                      'Sucre':9.3047199,'Putumayo':1.1493300,'Vaupés':0.9723900},inplace=True)

anichi['lon']=anichi['departamento']
anichi['lon'].replace({'Bogotá D.C.':-74.0817490,'Valle del Cauca':-77.0000000,'Antioquia':-75.5917435,
                      'Cartagena D.T. y C.':-75.5144424,'Huila':-76.0507126,'Meta':-73.7579727,
                      'Atlántico':-74.7738571,'Barranquilla D.E.':-74.7813187,'Risaralda':-75.6672668,
                      'Norte de Santander':-73.3560410,'Caldas':-74.6631088,'Cundinamarca': -74.2119522,
                      'Amazonas':-69.9432000,'Nariño':-77.6495895,'Santa Marta D.T. y C.':-74.1990433,
                      'Tolima':-74.8842926,'Magdalena':-74.2476501,'Cesar':-74.7170000,
                      'Quindío':-75.6409073,'Boyacá':-73.3677826,'Santander':-73.1197968,
                      'Buenaventura D.E.':-76.3036118,'Cauca':-76.6131592,'Bolívar':-74.7546692,
                      'Córdoba':-75.8814316,'Chocó':-76.6583481,'Casanare':-72.3958588,
                      'La Guajira':-72.9072189,'Caquetá':-75.6062317,'Arauca':-70.7590800,
                      'Archipiélago de San Andrés Providencia y Santa Catalina':-81.7005615,
                      'Sucre':-75.3977814,'Putumayo':-76.6466100,'Vaupés':-70.4063500},inplace=True)

newb=b.tolist()

anichi2=pd.DataFrame({'fechas':newfe,'casos':an_tot,'casos por dia':newb})
anichi2['fechas']=anichi2['fechas'].str.get(1)
anichi=pd.concat([anichi,anichi2],axis=1)
confe=anichi.iloc[:,4]

conewfe=np.arange(0,len(feani),1)
conteo=[]
i=0
cont=0
cont2=0
value=0
for j in conewfe:
    if feani[j]==confe[i]:
        value=value+newb[i]
        conteo.insert(cont,value)
        if i<1038:
            i+=1
    else:
        value=value
        conteo.insert(cont,value)
    cont+=1
    cont2+=1
    if cont2==len(totfet):
        cont2=0
        value=0
        
anichi['casos totales por dia y departamento']=conteo
anichi.to_excel("anima.xlsx",sheet_name="datos")
fig_13 = px.scatter_mapbox(anichi, lat='lat', lon='lon', hover_name='departamento', color='casos totales por dia y departamento', 
                        size='casos totales por dia y departamento',color_continuous_scale=px.colors.sequential.Blackbody_r,
                        zoom=4,animation_frame='fecha',title= 'Crecimiento del Covid-19 en Colombia', height=800)
fig_13.update_layout(
    mapbox_style="white-bg",
    mapbox_layers=[
        {
            "below": 'traces',
            "sourcetype": "raster",
            "source": [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}"
            ]
        }
      ])
fig_13.show()

fig_1=px.pie(df_result,values='casos', names='sexo', title='Casos Registrados Sexo')
fig_1.show()

fig_2=px.pie(df_result,values='casos', names='estado', title='Estado de los Contagiados')
fig_2.show()

fig_3=go.Figure()
fig_3.add_trace(go.Scatter(y=casos_d,x=diagnostico,mode='lines',name='Contagios Por Dia'))
fig_3.update_layout(
title_text="Grafica Contagios Por Dia",
template = 'plotly_dark',
showlegend=False,)
fig_3.show()

fig_4=go.Figure()
fig_4.add_trace(go.Scatter(y=con_tot,x=diagnostico,mode='lines',name='Contagios Totales Por Dia'))
fig_4.update_layout(
title_text="Grafica Contagios Totales Por Dia",
showlegend=False,)
fig_4.show()

fig_6=go.Figure()
fig_6.add_trace(go.Scatter(y=casos_r,x=recuperado,mode='lines',name='Recuperados por dia'))
fig_6.update_layout(
title_text="Grafica Recuperados por Dia",
template = 'plotly_dark',
showlegend=False,)
fig_6.show()

fig_7=go.Figure()
fig_7.add_trace(go.Scatter(y=rec_tot,x=recuperado,mode='lines',name='Recuperados Totales por dia'))
fig_7.update_layout(
title_text="Grafica Recuperados Totales por Dia",
showlegend=False,)
fig_7.show()

fig_9=go.Figure()
fig_9.add_trace(go.Scatter(y=casos_m,x=muerto,mode='lines',name='Fallecidos por Dia'))
fig_9.update_layout(
title_text="Fallecidos por Dia",
template = 'plotly_dark',
showlegend=False,)
fig_9.show()

fig_10=go.Figure()
fig_10.add_trace(go.Scatter(y=dead_tot,x=muerto,mode='lines',name='Fallecidos Totales por dia'))
fig_10.update_layout(
title_text="Grafica Fallecidos Totales por Dia",
showlegend=False,)
fig_10.show()

tresd=pd.DataFrame({'fecha diagnostico':diagnostico,'casos totales por dia':con_tot,'casos x dia':casos_d})
fig_12 = px.scatter_3d(tresd, x='fecha diagnostico', y='casos x dia', z='casos totales por dia', color='casos totales por dia', title='Grafica 3D Infectados Por Fechas Totales y Diarios')
fig_12.update_layout(
template = 'plotly_dark',
showlegend=False,)
fig_12.show()

tresd1 = pd.DataFrame({'fecha recuperado':recuperado,'recuperados totales x dia':rec_tot,'recuperados x dia':casos_r})
fig_14 = px.scatter_3d(tresd1, x='fecha recuperado', y='recuperados x dia', z='recuperados totales x dia', color='recuperados totales x dia', color_continuous_scale='greens', title='Grafica 3D Recuperados Por Fechas Totales y Diarios')
fig_14.update_layout(
template = 'plotly_dark',
showlegend=False,)
fig_14.show()

tresd2 = pd.DataFrame({'fecha muerte':muerto,'muertes totales x dia':dead_tot,'muertes x dia':casos_m})
fig_15 = px.scatter_3d(tresd2, x='fecha muerte', y='muertes x dia', z='muertes totales x dia', color='muertes totales x dia', color_continuous_scale='hot_r', title='Grafica 3D Muertes Por Fechas Totales y Diarios')
fig_15.update_layout(
template = 'plotly_dark',
showlegend=False,)
fig_15.show()

anastasio=np.arange(0,(len(b)),1)

fechasan=[]
an_tot=[]
deparn=[]
anit=0
j=0
corte=0
for i in anastasio: 
    newde=depart[corte]
    newfe=diagnostico[corte]
    anit=anit+b[i]
    an_tot.insert(i,anit)
    deparn.insert(i,newde)
    fechasan.insert(i,newfe)
    j+=1
    
    if j==lendep[corte]:
        anit=0
        corte+=1
        j=0
        if corte>31:
            corte=0
        
newfe=anim.index.values

fecha=diag.iloc[:,0]

totales=diag.iloc[:,18]
casost=diag.iloc[:,17]
diag_fecha = np.arange(0,len(diagnostico),1)

app = dash.Dash(_name_, external_stylesheets=external_stylesheets)

colors = {
    'background': '#000000',
    'text': '#fdf3fa'
}

app.layout = html.Div(
    html.Div([
         html.H1(children='Data viewer: Seguimineto del covid-19 en Colombia',
                 style={
            'textAlign' : 'center',
            'color': colors['text'],
            'background':  '#000000',

        }),
         
         html.Div(children='''
            Autores: Diego Amado, Sebastian Manjarres, Luis Velasquez.
         ''',style={
            'font': {
                    'family' : 'serif',
                    'color': colors['text']
                },
            'textAlign': 'center',
        }),
                    
         dcc.Graph(figure=fig_11), 
         dcc.Graph(figure=fig_13),  
         dcc.Graph(figure=fig_12), 
         dcc.Graph(figure=fig_14),
         dcc.Graph(figure=fig_15),
    
          dcc.Graph(figure=fig_2),
          
                  dcc.Graph(
        id="Bar_graph_1",
         figure={
        "data": [
         go.Bar(
            x=depart,
            y=casostot,     
            )],'layout': {
                'title': 'Grafica de infectados por departamentos',
                'plot_bgcolor': colors['background'],
                'paper_bgcolor': colors['background'],
                'font': {
                    'family' : 'serif',
                    'color': colors['text']
                },
               
            }}),          
          dcc.Graph(figure=fig_1),
          dcc.Graph(figure=fig_3),
          dcc.Graph(figure=fig_4),
          dcc.Graph(figure=fig_6),
          dcc.Graph(figure=fig_7),
          dcc.Graph(figure=fig_9),
          dcc.Graph(figure=fig_10),         
     ])            
  )

if _name_ == '_main_':
    app.run_server(debug=True, use_reloader=False)
